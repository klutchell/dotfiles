#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

usage()
{
	cat << EOF
usage: $(basename "$0") [--help] [utility-1] [utility-2]
example: sudo $(basename "$0") ntp git make stow
EOF
	exit 0
}

expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "$(date) [INFO]    $*" ; }
warning() { echo "$(date) [WARNING] $*" ; }
error()   { echo "$(date) [ERROR]   $*" ; }
fatal()   { echo "$(date) [FATAL]   $*" ; exit 1 ; }
exec >  >(tee -ia "$LOG_FILE")
exec 2> >(tee -ia "$LOG_FILE" >&2)

cleanup() {
	info "cleaning up..."
	# Remove temporary files, etc...
	# Restart services, etc...
	info "finished"
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup EXIT

[ -n "$1" ] || usage

if [ "$(id -u)" != "0" ]; then
	fatal "This script must be run as root" 1>&2
	exit 1
fi

info "installing $*..."

install_speedtest()
{
	# https://github.com/sivel/speedtest-cli
	apt install -y python
	curl -L https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py > /usr/local/bin/speedtest-cli
	chmod +x /usr/local/bin/speedtest-cli
	speedtest-cli --version
}

install_pip()
{
	apt install -y python
	curl https://bootstrap.pypa.io/get-pip.py | python2
}

install_virtualenv()
{
	install_pip
	pip install --upgrade virtualenv virtualenvwrapper
	rm -rf ~/.cache/pip
	WORKON_HOME="/home/$(who am i | awk '{print $1}')/.virtualenvs"
	export WORKON_HOME
	mkdir -p "$WORKON_HOME" || true
	# shellcheck disable=SC1091
	source /usr/local/bin/virtualenvwrapper.sh
}

install_docker()
{
	curl -sSL get.docker.com | sh
	usermod -aG docker "$(who am i | awk '{print $1}')"
	systemctl enable docker
	systemctl start docker
	docker --version
}

install_compose()
{
	# install_virtualenv
	# mkvirtualenv docker-compose -p python2
	# pip install --upgrade docker-compose
	# ln -sf "$(which docker-compose)" /usr/local/bin/docker-compose
	# deactivate
	
	latest_url="$(curl -s https://api.github.com/repos/docker/compose/releases | grep browser_download_url | grep "docker-compose-$(uname -s)-$(uname -m)" | head -n 1 | cut -d '"' -f 4)"
	curl -L "$latest_url" > /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
	
	docker-compose --version
}

install_acdcli()
{
	install_virtualenv
	mkvirtualenv acdcli -p python3
	pip3 install --upgrade acdcli
	ln -sf "$(which acdcli)" /usr/local/bin/acdcli
	ln -sf "$(which acd_cli)" /usr/local/bin/acd_cli
	deactivate
	acdcli version
}

install_whalebrew()
{
	# https://github.com/bfirsh/whalebrew
	latest_url="$(curl -s https://api.github.com/repos/bfirsh/whalebrew/releases | grep browser_download_url | grep "whalebrew-$(uname -s)-$(uname -m)" | head -n 1 | cut -d '"' -f 4)"
	curl -L "$latest_url" > /usr/local/bin/whalebrew
	chmod +x /usr/local/bin/whalebrew
}

install_lynis()
{
	# https://cisofy.com/documentation/lynis/get-started/#installation-package
	git clone https://github.com/CISOfy/lynis /opt/lynis
}

install_gdrive()
{
	wget 'https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA&export=download' -O gdrive-linux-x64
	cp gdrive-linux-x64 /usr/sbin/gdrive
	chown root:root /usr/sbin/gdrive
	chmod 755 /usr/sbin/gdrive
}

install_rclone()
{
	install_snap
	snap install rclone --classic
	snap refresh rclone
}

install_git()
{
	install_softwareproperties
	add-apt-repository ppa:git-core/ppa
	apt-get update
	apt install -y git
}

install_ntp()
{
	timedatectl set-timezone 'America/New_York'
	apt install -y ntp
	ufw allow 'ntp'
}

install_ssh()
{
	apt install -y openssh-server
	ufw allow 'OpenSSH'
}

for util in "$@"
do
	if [ "$(type -t "install_${util}")" == "function" ]; then
		eval "install_${util}" || usage
	else
		apt install -y "${util}" || usage
	fi
done
