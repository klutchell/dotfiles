#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

usage()
{
	cat << EOF
usage: $(basename "$0") [--help] [utility-1] [utility-2]
example: sudo $(basename "$0") ntp git make stow
EOF
	exit 0
}

expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "$(date) [INFO]    $*" ; }
warning() { echo "$(date) [WARNING] $*" ; }
error()   { echo "$(date) [ERROR]   $*" ; }
fatal()   { echo "$(date) [FATAL]   $*" ; exit 1 ; }
exec >  >(tee -ia "$LOG_FILE")
exec 2> >(tee -ia "$LOG_FILE" >&2)

cleanup() {
	info "cleaning up..."
	# Remove temporary files, etc...
	# Restart services, etc...
	info "finished"
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup EXIT

[ -n "${1:-}" ] || usage

info "installing $*..."

install_speedtest()
{
	# https://github.com/sivel/speedtest-cli
	sudo apt install speedtest-cli
	speedtest --version
}

install_pip()
{
	sudo apt install -y python
	curl https://bootstrap.pypa.io/get-pip.py | python2
	/usr/local/bin/pip2 --version
}

install_pip3()
{
	sudo apt install -y python3
	curl https://bootstrap.pypa.io/get-pip.py | python3
	/usr/local/bin/pip3 --version
}

install_virtualenv()
{
	set +u
	install_pip
	sudo -H /usr/local/bin/pip2 install --upgrade virtualenv virtualenvwrapper
	rm -rf ~/.cache/pip
	WORKON_HOME="/home/$(who am i | awk '{print $1}')/.virtualenvs"
	export WORKON_HOME
	mkdir -p "$WORKON_HOME" || true
	# shellcheck disable=SC1091
	source /usr/local/bin/virtualenvwrapper.sh
	set -u
}

install_docker()
{
	curl -sSL get.docker.com | sh
	sudo usermod -aG docker "$(who am i | awk '{print $1}')"
	sudo systemctl enable docker
	sudo systemctl start docker
	docker --version
}

install_compose()
{
	latest_url="$(curl -s https://api.github.com/repos/docker/compose/releases | grep browser_download_url | grep "docker-compose-$(uname -s)-$(uname -m)" | head -n 1 | cut -d '"' -f 4)"
	sudo bash -c "curl -L \"$latest_url\" > /usr/local/bin/docker-compose"
	sudo chmod +x /usr/local/bin/docker-compose
	docker-compose --version
}

install_acdcli()
{
	install_pip3
	sudo -H /usr/local/bin/pip3 install --upgrade git+https://github.com/yadayada/acd_cli.git
	acdcli version
}

install_whalebrew()
{
	# https://github.com/bfirsh/whalebrew
	latest_url="$(curl -s https://api.github.com/repos/bfirsh/whalebrew/releases | grep browser_download_url | grep "whalebrew-$(uname -s)-$(uname -m)" | head -n 1 | cut -d '"' -f 4)"
	sudo bash -c "curl -L \"$latest_url\" > /usr/local/bin/whalebrew"
	sudo chmod +x /usr/local/bin/whalebrew
	whalebrew --version
}

install_lynis()
{
	# https://cisofy.com/documentation/lynis/get-started/#installation-package
	sudo git clone https://github.com/CISOfy/lynis /opt/lynis
}

install_rclone()
{
	sudo apt install -y snap
	sudo snap install rclone --classic
	sudo snap refresh rclone
	rclone --version
}

install_git()
{
	sudo apt install -y software-properties-common
	sudo add-apt-repository ppa:git-core/ppa
	sudo apt-get update
	sudo apt install -y git
	git --version
}

install_ntp()
{
	timedatectl set-timezone 'America/New_York'
	sudo apt install -y ntp
	sudo ufw allow 'ntp'
}

install_ssh()
{
	sudo apt install -y openssh-server
	sudo ufw allow 'OpenSSH'
}

for util in "$@"
do
	if [ "$(type -t "install_${util}")" == "function" ]; then
		eval "install_${util}" || usage
	else
		apt install -y "${util}" || usage
	fi
done
