#!/usr/bin/env bash

set -eo pipefail

THIS="$(basename "$0")"
SCRATCH="$(mktemp -d -t tmp.XXXXXXXXXX)"

finish()
{
	local rc=$?
	echo "exited $THIS with error level $rc"
	popd &>/dev/null || true
	rm -rf "$SCRATCH" &>/dev/null || true
	exit $rc
}
trap finish INT TERM EXIT

# print arguments
echo "running $THIS $@"

if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

install_virtualenv()
{
	install_pip
	pip install --upgrade virtualenv
}

install_virtualenv3()
{
	install_pip3
	pip3 install --upgrade virtualenv
}

install_docker()
{
	# https://docs.docker.com/engine/installation/linux/ubuntulinux/
	curl -sSL get.docker.com | sh
	docker --version
	systemctl enable docker
	systemctl start docker
	usermod -aG docker "$(who -m | awk '{print $1;}')"
}

install_compose()
{
	install_pip
	pip install --upgrade docker-compose
	docker-compose --version
}

install_acdcli()
{
	install_pip3
	pip3 install --upgrade acdcli
}

install_snap()
{
	apt install -y snap
}

install_whalebrew()
{
	# https://github.com/bfirsh/whalebrew
	latest_url="$(curl -s https://api.github.com/repos/bfirsh/whalebrew/releases | grep browser_download_url | grep "whalebrew-$(uname -s)-$(uname -m)" | head -n 1 | cut -d '"' -f 4)"
	curl -L "$latest_url" > /usr/local/bin/whalebrew
	chmod +x /usr/local/bin/whalebrew
}

install_softwareproperties()
{
	apt install -y software-properties-common
}

install_stow()
{
	# http://www.gnu.org/software/stow/
	apt install -y stow
}

install_make()
{
	apt install -y make
}

install_etckeeper()
{
	apt install -y etckeeper
}

install_cipherscan()
{
	# https://github.com/mozilla/cipherscan
	# git clone https://github.com/mozilla/cipherscan.git /opt/cipherscan
	install_whalebrew
	whalebrew install klutchell/cipherscan
}

install_lynis()
{
	# https://cisofy.com/documentation/lynis/get-started/#installation-package
	git clone https://github.com/CISOfy/lynis /opt/lynis
}

install_rclone()
{
	install_snap
	snap install rclone --classic
	snap refresh rclone
}

install_gdrive()
{
	wget 'https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA&export=download' -O gdrive-linux-x64
	cp gdrive-linux-x64 /usr/sbin/gdrive
	chown root:root /usr/sbin/gdrive
	chmod 755 /usr/sbin/gdrive
}

install_unionfs()
{
	apt install -y unionfs-fuse
}

install_encfs()
{
	apt install -y encfs
}

install_zip()
{
	apt install -y zip
}

install_unzip()
{
	apt install -y unzip
}

install_pip()
{
	apt install -y python-pip
	pip install --upgrade pip
}

install_pip3()
{
	apt install -y python3-pip
}

install_cifs()
{
	apt install -y cifs-utils
}

install_moreutils()
{
	apt install -y moreutils
}

install_ufw()
{
	apt install -y ufw
}

install_ntp()
{
	timedatectl set-timezone 'America/New_York'
	apt install -y ntp
	ufw allow 'ntp'
}

install_openssh()
{
	apt install -y openssh-server
	ufw allow 'OpenSSH'
}

install_fail2ban()
{
	apt install -y fail2ban
}

install_nano()
{
	apt install -y nano
}

install_git()
{
	install_softwareproperties
	add-apt-repository ppa:git-core/ppa
	apt-get update
	apt install -y git
}

install_rsnapshot()
{
	apt install -y rsnapshot
}

install_common()
{
	install_ufw
	install_ntp
	install_openssh
	install_git
	install_nano
	install_make
	install_stow
}

usage()
{
	echo "usage: $THIS [utilities]"
	echo "utilities:"
	compgen -A function | sed -nr 's|^install_(.+)$| \1|p'
	exit 1
}

pushd "$SCRATCH" >/dev/null

[ -n "$1" ] || usage
for util in $@
do
	eval "install_${util}" || usage
done

popd >/dev/null
