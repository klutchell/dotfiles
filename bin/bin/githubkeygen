#!/usr/bin/env bash

set -euo pipefail

# capture script exit
cleanup()
{
	local rc=$?
	info "exited with error level ${rc}"
	exit ${rc}
}

# get the command name without path
cmd()	{ basename "${0}" ; }

# determine absolute path to a provided file/folder
abs()	{ echo "$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")"; }

# append timestamp and loglevel prints
debug()		{ if [ "${debug_enabled:-}" == "true" ]; then 
			  echo "$(date)  [DEBUG]   $*" ; fi ; }
info()		{ echo "$(date)  [INFO]    $*" ; }
warning()	{ echo "$(date)  [WARNING] $*" ; }
error()		{ echo "$(date)  [ERROR]   $*" ; }
fatal()		{ echo "$(date)  [FATAL]   $*" ; exit 1 ; }

usage()
{
    cat <<EOF

Usage:
                $(cmd) <github_username> <github_keyname>
Description:
                Generate github rsa key and sync with github account for SSH authentication.
Examples:
                $(cmd) klutchell id_rsa.github
                $(cmd) --help
Parameters:
                github_username     github username for syncing SSH keys

                github_keyname      custom github keyname

                --help              display this help message

                --debug             enable debug logs

EOF
exit 2
}


# return here if this script was sourced
[[ "${BASH_SOURCE[0]:-${0}}" != "${0}" ]] && return

# trap any exit code beyond this point
trap cleanup INT TERM EXIT

# set defaults
debug_enabled="false"

# catch help param
expr "$*" : ".*--help" > /dev/null && usage

# catch debug param
expr "$*" : ".*--debug" > /dev/null && debug_enabled="true"

# read github username from params
github_username="${1:-}"

# read github keyname from params
github_keyname="${2:-}"


# WORK START


# prompt for github username if not provided
while [ -z "${github_username:-}" ]
do
	read -r -p "github username: " github_username < /dev/tty
done

# prompt for github username if not provided
while [ -z "${github_keyname:-}" ]
do
	read -r -e -p "github keyname: " -i "id_rsa.${github_username}@github.com" github_keyname < /dev/tty
done


github_privkey="$(abs "${HOME}/.ssh/${github_keyname}")"
github_pubkey="$(abs "${HOME}/.ssh/${github_keyname}.pub")"
pubkey_comment="${github_keyname/id_rsa\./} ($(id -un)@$(hostname))"


# check github ssh-rsa key exists
info "checking for existing public github ssh-rsa key..."
if [ -f "${github_pubkey}" ]
then
	# use existing github ssh-rsa key
	info "found '${github_pubkey}'"
else
	# generate github ssh-rsa key
	info "generating 4096-bit ssh-rsa key..."
	ssh-keygen -C "${pubkey_comment}" -f "${github_privkey}" -N '' -t "rsa" -b "4096" ||
		fatal "generating ssh-rsa key failed"
fi


# read public key
pubkey_data="$(<"${github_pubkey}")" || fatal "failed to read '${github_pubkey}'"

# download public keys from github
info "downloading public ssh-rsa keys from github account..."
curl "https://github.com/${github_username}.keys" >> "$(abs "${HOME}/.ssh/authorized_keys")" ||
	fatal "downloading public keys failed"


# upload public ssh key to github
info "uploading public ssh-rsa key to github account..."
curl --user "${github_username}" --data "{\"title\":\"${pubkey_comment}\",\"key\":\"${pubkey_data}\"}" \
	https://api.github.com/user/keys < /dev/tty ||
		fatal "uploading public key failed"

info "done!"
