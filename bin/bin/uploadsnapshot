#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

usage()
{
	cat << EOF
usage: $(basename "$0") [--help]
example: $0
EOF
	exit 0
}

expr "$*" : ".*--help" > /dev/null && usage

readonly log_file="/tmp/$(basename "$0").log"
info()    { echo "$(date) [INFO]    $*" ; }
warning() { echo "$(date) [WARNING] $*" ; }
error()   { echo "$(date) [ERROR]   $*" ; }
fatal()   { echo "$(date) [FATAL]   $*" ; exit 1 ; }
exec >  >(tee -ia "$log_file")
exec 2> >(tee -ia "$log_file" >&2)

cleanup() {
	info "cleaning up..."
	popd 2>/dev/null || true
	rm "${gdrive_tmpfile:-}" 2>/dev/null || true
	rm "/tmp/${tarball_name:-}" 2>/dev/null || true
	info "finished"
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup EXIT

# edit these as needed
gdrive_configdir="/home/ubuntu/.gdrive"
gdrive_cmd="$(which gdrive) -c '${gdrive_configdir}'"
gdrive_tmpfile="/tmp/gdrive.tmp"
gdrive_parentdir="0B8Hwaj3ywtn-Y1RmLWg3WmMtRFU"
snapshot_dir="/home/ubuntu/rsnapshot/alpha.0/localhost"
max_to_keep=3

(. "$(dirname "${BASH_SOURCE[0]}")/ask.sh")

snapshot_list()
{
	# list snapshots on remote
	eval "$gdrive_cmd list --query \"name contains '$(hostname)' and '${gdrive_parentdir}' in parents and trashed = false\" --order \"createdTime desc\" > \"${gdrive_tmpfile}\""
	curr_snapshot_count="$(($(wc -l < "${gdrive_tmpfile}")-1))"
	info "counted $curr_snapshot_count snapshots on remote"
}

snapshot_upload()
{
	[ -d "$snapshot_dir" ] || usage
	
	# tarball name includes hostname and timestamp of the snapshot dir
	tarball_name="$(hostname)_$(date -r "${snapshot_dir}" +%Y.%m.%d_%H.%M.%S).tar.gz"
	
	# upload or update
	snapshot_list
	file_id="$(grep "${tarball_name}" "${gdrive_tmpfile}" | head -n1 | cut -d' ' -f1)" || true
	[ -n "$file_id" ] && fatal "$tarball_name already exists on remote!"
	
	# compress snapshot contents
	pushd "$snapshot_dir" >/dev/null
	info "compressing $snapshot_dir..."
	tar -czf "/tmp/${tarball_name}" ./*
	popd >/dev/null
	
	info "uploading $tarball_name..."
	eval "$gdrive_cmd upload -p \"${gdrive_parentdir}\" \"/tmp/${tarball_name}\""

	# delete oldest
	snapshot_list
	while [ "${curr_snapshot_count}" -gt "${max_to_keep}" ]; do
		file_id="$(tail -n1 ${gdrive_tmpfile} | cut -d' ' -f1)"
		info "deleting oldest file..."
		eval "$gdrive_cmd delete \"${file_id}\""
		snapshot_list
	done
}

snapshot_upload