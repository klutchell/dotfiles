#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

#/ Usage: bootstrap
#/ Description: install required utilities and sync dotfiles with personal github repo;
#/              a github username and password will be required;
#/              each step will prompt you to continue before taking any action;
#/              answer 'no' to all questions and nothing will be performed;
#/ Examples: bootstrap
#/   --help: Display this help message

usage() { grep '^#/' "$0" | cut -c4- ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

cleanup() {
	info "cleaning up..."
	# Remove temporary files
	# Restart services
	# ...
}

ask()
{
	# http://djm.me/ask
	local prompt default REPLY

	while true; do

		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
			default=N
		else
			prompt="y/n"
			default=
		fi

		# Ask the question (not using "read -p" as it uses stderr not stdout)
		echo -n "$1 [$prompt] "

		# Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
		read REPLY < /dev/tty

		# Default?
		if [ -z "$REPLY" ]; then
			REPLY=$default
		fi

		# Check if the reply is valid
		case "$REPLY" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac

	done
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup EXIT

info "first we can optionally update all currently installed packages via apt"
if ask "update packages?" Y
then
	# update installed packages
	sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y && sudo apt-get autoremove -y
fi

info "we require some common utilities (git, make, stow) in order to install dotfiles"
if ask "install utilities?" Y
then
	# install common utilities
	(curl https://raw.githubusercontent.com/klutchell/dotfiles/master/bin/bin/myinstall | sudo bash -s git make stow \
	|| error "some utilities failed to install")
fi

info "now we can optionally download your public github ssh keys and save them in ~/.ssh/authorized_keys"
info "this will authorize your existing workstations to ssh into this server without a password"
info "your github username will be required"
if ask "authorize public keys?" Y
then
	while [ -z "${github_user:-}" ]
	do
		read -p "github username: " github_user < /dev/tty
	done
	# download public keys from github
	mkdir ~/.ssh 2>/dev/null || true
	curl "https://github.com/${github_user}.keys" >> ~/.ssh/authorized_keys \
	|| error "downloading public keys failed"
fi

while [ ! -f ~/.ssh/id_rsa.pub ]
do
	# generate id_rsa if it doesn't exist
	info "the next few steps require a public ssh key saved in ~/.ssh/id_rsa.pub"
	if ask "generate key?" Y
	then
		ssh-keygen -f ~/.ssh/id_rsa -N '' -t rsa -b 4096 \
		|| error "generating ssh-rsa key failed"
	else
		fatal "public ssh key ~/.ssh/id_rsa.pub required to continue"
	fi
done

# copy public key and title strings
info "found public ssh key ~/.ssh/id_rsa.pub"
key="$(cat ~/.ssh/id_rsa.pub)"
title="${key##* }"

info "in order to clone via ssh, we need to add your public ssh key for this workstation to your github account"
info "your github username and password will be required"
if ask "add public key?" Y
then
	while [ -z "${github_user:-}" ]
	do
		read -p "github username: " github_user < /dev/tty
	done
	# upload public ssh key to github
	curl --user "${github_user}" --data "{\"title\":\"${title}\",\"key\":\"${key}\"}" https://api.github.com/user/keys < /dev/tty \
	|| fatal "uploading public key failed"
fi

info "now we can clone your dotfiles git repo into ~/dotfiles"
if ask "clone repo?" Y
then
	# clone dotfiles
	git clone git@github.com:${github_user}/dotfiles.git ~/dotfiles \
	|| fatal "cloning dotfiles repo failed"
fi

info "next we will use stow to soft link files and folders in ~/dotfiles/*/ to ~/"
if ask "link dotfiles?" Y
then
	# install dotfiles
	pushd ~/dotfiles
	make install \
	|| fatal "linking dotfiles failed"
	popd
fi
