#!/usr/bin/env bash

set -euo pipefail

# HELPER FUNCTIONS START

# get the command name without path
cmd()       { basename "$(abs "${0}")" ; }

# get the workspace absolute path
ws()        { dirname "$(abs "${0}")" ; }

# determine absolute path to a provided file/folder
abs()       { echo "$(cd "$(dirname "${1}")" && pwd)/$(basename "${1}")"; }

# append timestamp and loglevel prints
debug()     { if [ "${debug_enabled:-}" == "true" ]; then 
			  echo "$(date)  [DEBUG]   $*" ; fi ; }
info()      { echo "$(date)  [INFO]    $*" ; }
warning()   { echo "$(date)  [WARNING] $*" ; }
error()     { echo "$(date)  [ERROR]   $*" ; }
fatal()     { echo "$(date)  [FATAL]   $*" ; exit 1 ; }

invalid_args()  { fatal "invalid arguments: '$*'" ; }

extra_args()    { fatal "extra arguments: '$*'" ; }

path_missing()  { fatal "'${1}' does not exist or cannot be read" ; }

dos2unix()      { sed -i 's/\r$//' "${1}" ; }
unix2dos()      { sed -i 's/$/\r/' "${1}" ; }

# take an arbitrary path and figure out whether
# it's relative to the script dir or the calling dir
# requires 'abs' and 'ws' functions!
rel_to_abs_path()
{
	# relative to calling dir
	[ -e "${1}" ] && { abs "${1}"; return; }
	# relative to script dir			
	[ -e "$(ws)/${1}" ] && { echo "$(ws)/${1}"; return; }
	# does not exist
	echo ""							
}


# HELPER FUNCTIONS END


# capture script exit
cleanup()
{
	local rc=$?
	info "exited with error level ${rc}"
	exit ${rc}
}

usage()
{
	cat <<EOF
Usage:
				$(cmd) [github_user]
Description:
				clone dotfiles repo from github and install with stow
Examples:
				$(cmd) --help
				$(cmd) klutchell --debug
Parameters:
				[github_user]       ${github_user_prompt}

				-h|--help           display this help message

				-d|--debug          enable debug logging
EOF
exit 2
}


get_options()
{
	# require at least one param
	# [ "$#" -lt 1 ] && usage

	local OPT opts pass
	local debug_enabled_opt github_user_opt

	github_user_opt=""
	debug_enabled_opt=false

	# option defaults
	# shellcheck disable=SC2034
	OPT="value"

	# getopts string
	# this string needs to be updated with the single character options
	opts="dh:"

	# there are two passes here; the first pass handles the long options and
	# any short option that is already in canonical form; the second pass
	# uses getopt to canonicalize any remaining short options and handle them
	for pass in 1 2
	do
		while [ -n "${1:-}" ]
		do
			case ${1} in
				--) shift; break;;
				-*) case "${1}" in
						-d|--debug )        debug_enabled_opt=true ;;
						-h|--help )         usage ;;
						--*)                invalid_args "${1}" ;;
						-*)     if [ "${pass}" -eq 1 ]
								then
									ARGS="${ARGS:-} ${1}"
								else
									invalid_args "${1}"
								fi;;
					esac;;
				*)  if [ "${pass}" -eq 1 ]
					then
						ARGS="${ARGS:-} ${1}"
					else
						invalid_args "${1}"
					fi;;
			esac
			shift
		done
		if [ "${pass}" -eq 1 ]
		then
			ARGS=$(getopt "${opts}" "${ARGS:-}") || usage
			# shellcheck disable=SC2086
			set -- ${ARGS}
		fi
	done

	# handle positional arguments

	# don't allow any positional arguments
	# [ -n "$*" ] && extra_args "$*"

	# require at least one positional argument
	# [ "$#" -lt 1 ] && usage

	if [ -n "${1:-}" ]
	then
		github_user_opt="${1}"
	else
		# prompt for github user if not provided
		read -r -e -p "${github_user_prompt}: " -i "${github_user_opt}" github_user_opt < /dev/tty
	fi

	readonly github_user="${github_user_opt}"
	readonly debug_enabled="${debug_enabled_opt}"
}


# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-${0}}" != "${0}" ]] && return

# trap any exit code beyond this point
trap cleanup INT TERM EXIT


# DEFINE STATICS START


readonly github_user_prompt="github user for cloning dotfiles (blank to skip)"

readonly install_utils="git make stow ntp shellcheck"

readonly dotfiles_dir="${HOME}/.dotfiles"

readonly rsa_priv_key="${HOME}/.ssh/id_rsa"

readonly rsa_pub_key="${rsa_priv_key}.pub"

readonly rsa_key_comment="$(id -un)@$(hostname) $(date)"


# DEFINE STATICS END


# WORK START


get_options "$@"


debug "install_utils: '${install_utils}'"
debug "dotfiles_dir: '${dotfiles_dir}'"
debug "rsa_priv_key: '${rsa_priv_key}'"
debug "rsa_pub_key: '${rsa_pub_key}'"
debug "rsa_key_comment: '${rsa_key_comment}'"
debug "github_user: '${github_user}'"
debug "debug_enabled: '${debug_enabled}'"


# set timezone
sudo timedatectl set-timezone 'America/New_York'

# update package sources
info "updating package sources..."
sudo apt-get update -y || true

# install handy utils
info "installing '${install_utils}'..."
sudo apt-get install ${install_utils} -y || error "some utilities failed to install"

if [ -n "${rsa_pub_key}" ]
then
	if [ -f "${rsa_pub_key}" ]
	then
		# use existing rsa key
		info "found '${rsa_pub_key}'"
	else
		# create rsa key parent folder and set permissions
		if [ ! -d "$(dirname "${rsa_pub_key}")" ]
		then
			mkdir -p "$(dirname "${rsa_pub_key}")" && chmod 700 "$(dirname "${rsa_pub_key}")"
		fi

		# generate a new rsa key
		info "generating a new 4096-bit rsa key..."
		ssh-keygen -C "${rsa_key_comment}" -f "${rsa_priv_key}" -N '' -t "rsa" -b "4096" ||
			fatal "generating rsa key failed"
	fi

	# start ssh-agent and add private key to ssh agent
	# [ -z "${SSH_AUTH_SOCK:-}" ] && eval "$(ssh-agent -s)"
	info "adding key to ssh-agent..."
	ssh-add "${rsa_priv_key}" || warning "failed to add key to ssh-agent"

	# read public key
	pub_key_data="$(<"${rsa_pub_key}")" || fatal "failed to read '${rsa_pub_key}'"

	debug "pub_key_data: '${pub_key_data}'"
fi

if [ -n "${github_user}" ] && [ -n "${rsa_key_comment}" ] && [ -n "${pub_key_data}" ]
then
	# upload public ssh key to github
	info "uploading public rsa key to github account..."
	curl --user "${github_user}" --data "{\"title\":\"${rsa_key_comment}\",\"key\":\"${pub_key_data}\"}" \
		"https://api.github.com/user/keys" < /dev/tty || error "uploading public key failed"
fi

if [ -n "${github_user}" ]
then
	# clone dotfiles
	info "cloning dotfiles repo to '${dotfiles_dir}'..."
	git clone "git@github.com:${github_user}/dotfiles.git" "${dotfiles_dir}" || error "cloning dotfiles repo failed"
fi

# backup existing .bashrc
[ -f "${HOME}/.bashrc" ] && [ ! -f "${HOME}/.bashrc.orig" ] && mv "${HOME}/.bashrc" "${HOME}/.bashrc.orig"

# install dotfiles
info "installing dotfiles..."
(cd "${dotfiles_dir}"
	make install || error "installing dotfiles failed"
)

info "done!"

exit 0
