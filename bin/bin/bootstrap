#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

#/ Usage: bootstrap
#/ Description: install required utilities and sync dotfiles with personal github repo;
#/              a github username and password will be required;
#/              each step will prompt you to continue before taking any action;
#/              answer 'no' to all questions and nothing will be performed;
#/ Examples: bootstrap
#/   --help: Display this help message

usage() { grep '^#/' "$0" | cut -c4- ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

cleanup() {
	info "cleaning up..."
	# Remove temporary files
	# Restart services
	# ...
}

ask()
{
	# http://djm.me/ask
	local prompt default REPLY

	while true; do

		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
			default=N
		else
			prompt="y/n"
			default=
		fi

		# Ask the question (not using "read -p" as it uses stderr not stdout)
		echo -n "$1 [$prompt] "

		# Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
		read REPLY < /dev/tty

		# Default?
		if [ -z "$REPLY" ]; then
			REPLY=$default
		fi

		# Check if the reply is valid
		case "$REPLY" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac

	done
}

# exit here if this script was sourced
[[ "${BASH_SOURCE[0]:-$0}" != "$0" ]] && exit 0

trap cleanup EXIT

info "do you want to update all currently installed packages via apt?"
info "(recommended)"
if ask "?" Y
then
	# update installed packages
	sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y && sudo apt-get autoremove -y
fi

info "do you want to install git, make, and stow?"
info "(required for installing dotfiles)"
if ask "?" Y
then
	# install common utilities
	(curl https://raw.githubusercontent.com/klutchell/dotfiles/master/bin/bin/myinstall | bash -s git make stow \
	|| error "some utilities failed to install")
fi

info "do you want to download your public github ssh keys and save them in ~/.ssh/authorized_keys?"
info "(allows your other workstations authenticate via keys to this workstation)"
if ask "?" Y
then
	while [ -z "${github_user:-}" ]
	do
		read -p "github username: " github_user < /dev/tty
	done
	# download public keys from github
	mkdir ~/.ssh 2>/dev/null || true
	curl "https://github.com/${github_user}.keys" >> ~/.ssh/authorized_keys \
	|| error "downloading public keys failed"
fi

while [ ! -f ~/.ssh/id_rsa.pub ]
do
	# generate id_rsa if it doesn't exist
	info "do you want to generate a public ssh key and save it in ~/.ssh/id_rsa.pub?"
	info "(a public key will be required to authenticate with github)"
	if ask "?" Y
	then
		ssh-keygen -f ~/.ssh/id_rsa -N '' -t rsa -b 4096 \
		|| error "generating ssh-rsa key failed"
	else
		fatal "public ssh key ~/.ssh/id_rsa.pub required to continue"
	fi
done

# copy public key and title strings
info "found public ssh key ~/.ssh/id_rsa.pub"
key="$(cat ~/.ssh/id_rsa.pub)"
title="${key##* }"

info "do you want to add your public ssh key for this workstation to your github account?"
info "(your github username and password will be required)"
if ask "?" Y
then
	while [ -z "${github_user:-}" ]
	do
		read -p "github username: " github_user < /dev/tty
	done
	# upload public ssh key to github
	curl --user "${github_user}" --data "{\"title\":\"${title}\",\"key\":\"${key}\"}" \
	https://api.github.com/user/keys < /dev/tty || fatal "uploading public key failed"
fi

info "do you want to clone your dotfiles git repo into ~/dotfiles?"
info "(this is required to install dotfiles)"
if ask "?" Y
then
	# clone dotfiles
	git clone git@github.com:${github_user}/dotfiles.git ~/dotfiles \
	|| fatal "cloning dotfiles repo failed"

	info "do you want to use stow to soft link files and folders in ~/dotfiles/*/ to ~/ ?"
	if ask "?" Y
	then
		# install dotfiles
		pushd ~/dotfiles
		make install || fatal "linking dotfiles failed"
		popd
	fi
fi
